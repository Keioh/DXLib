#include "diploidApp\DiploidEngineApp.h"

void DiploidEngineApp::FileCreate()//ゲーム起動時に一度だけファイルを作る処理。
{
	
}

void DiploidEngineApp::Load()//ゲーム起動時に1回だけロードするデータ(音や画像やセーブデータやマップデータなど)
{	
	object.map.Load("texter/MAP/test_map.png", 128, 128);//マップ画像データを読み込み(最後のx,yは画像の大きさを指定)
	object.image.Load("texter/test_map_chip/01_ground_rock_32_32.png");
}

void DiploidEngineApp::Init()//ゲーム起動時に一回だけ初期化したい処理を記述。
{
	object.map.SetMapChipSize(96);//map_data画像の1ドットをどれだけ拡大するか指定
	object.map.Create();//画像データからマップデータを作成

	object.box.Init(VGet(1280/2 + 12, 720/2 + 90,0), VGet(25, 10,0));//pointグラフィックをマウスに追従させる
	object.box.layer_number = DIPLOID_ENGINE_MAP_HIT_OBJECT;
	object.box.number = OBJECT_NUMBER_PLAYER_DOWN;//下
	object.box.name_tag = "player_down";
	diploidEngineImpact.PushBox(object.box);//pointグラフィックをImpact配列に追加

	object.box.Init(VGet(1280 / 2, 720 / 2 - 4, 0), VGet(50, 10, 0));//pointグラフィックをマウスに追従させる
	object.box.layer_number = DIPLOID_ENGINE_MAP_HIT_OBJECT;
	object.box.number = OBJECT_NUMBER_PLAYER_UP;//上
	object.box.name_tag = "player_up";
	diploidEngineImpact.PushBox(object.box);//pointグラフィックをImpact配列に追加

	object.box.Init(VGet(1280 / 2 - 5, 720 / 2 + 12, 0), VGet(10, 75, 0));//pointグラフィックをマウスに追従させる
	object.box.layer_number = DIPLOID_ENGINE_MAP_HIT_OBJECT;
	object.box.number = OBJECT_NUMBER_PLAYER_LEFT;//左
	object.box.name_tag = "player_left";
	diploidEngineImpact.PushBox(object.box);//pointグラフィックをImpact配列に追加

	object.box.Init(VGet(1280 / 2 + 45, 720 / 2 + 12, 0), VGet(10, 75, 0));//pointグラフィックをマウスに追従させる
	object.box.layer_number = DIPLOID_ENGINE_MAP_HIT_OBJECT;
	object.box.number = OBJECT_NUMBER_PLAYER_RIGHT;//右
	object.box.name_tag = "player_right";
	diploidEngineImpact.PushBox(object.box);//pointグラフィックをImpact配列に追加


	object.box.Init(VGet(1280 / 2 , 720 / 2, 0), VGet(50, 96, 0));//pointグラフィックをマウスに追従させる
	object.box.layer_number = DIPLOID_ENGINE_PLAYER_ENEMY_HIT_OBJECT;
	object.box.number = OBJECT_NUMBER_PLAYER_BODY;//本体
	object.box.name_tag = "player_body";
	diploidEngineImpact.PushBox(object.box);//pointグラフィックをImpact配列に追加


	for (auto count = object.map.MAP.begin(); count != object.map.MAP.end(); ++count)//map.MAP配列をsize_t(auto)で取得しMAP.end()まで下記のことを繰り返す
	{
		if ((count->red == 0) && (count->green == 0) && (count->blue == 0) && (count->alph == 255))//α値が255の時かつ黒の時
		{
			int n = 0;
			n++;

			object.box.Init(VGet((count->x * count->size) - 200, (count->y * count->size) - 200, 0), VGet(count->size, count->size, 0));
			object.box.layer_number = DIPLOID_ENGINE_MAP_HIT_OBJECT;
			object.box.number = OBJECT_NUMBER_PLAYER_MAX + n;
			object.box.name_tag = "01_ground_rock";
			diploidEngineImpact.PushBox(object.box);

			object.image.Init(VGet((count->x * count->size + 32 * 1.5) - 200, (count->y * count->size + 32 * 1.5) - 200, 0), 3.0f);
			object.image.layer_number = DIPLOID_ENGINE_MAP_HIT_OBJECT;
			object.image.number = object.box.number;
			diploidEngineLayer.PushTopGraphics(object.image);
		}
	}
}

void DiploidEngineApp::Updata()//アニメーションなど連続して行いたい処理。(主に数値処理)
{
	float gravity = object.physics.Gravity(20.0f);//重力で落ちた際の最大速度を設定。
	float jump = object.physics.Jump(22.0f);//ジャンプ力を設定。

	object.physics.SetGravitySize(0.5f);//重力加速度を0.5に設定。(落ちるときの速さを指定)

	//重力を常にかける。
	for (int count = OBJECT_NUMBER_PLAYER_MAX; count != diploidEngineImpact.box_vector.size(); ++count)
	{
		diploidEngineImpact.SetBoxPositionAnimationY(count, gravity + jump);
		diploidEngineLayer.SetTOPAnimationPositionY(count, gravity + jump);
	}

	//右移動
	if ((diploidEngineInput.GetKey(KEY_INPUT_D) == 1) && (diploidEngineImpact.GetBoxImpactFlag(OBJECT_NUMBER_PLAYER_RIGHT) == 0))
	{
		for (int count = OBJECT_NUMBER_PLAYER_MAX; count != diploidEngineImpact.box_vector.size(); ++count)
		{
			diploidEngineImpact.SetBoxPositionAnimationX(count, -6);
			diploidEngineLayer.SetTOPAnimationPositionX(count, -6);
		}
	}//左移動
	else if ((diploidEngineInput.GetKey(KEY_INPUT_A) == 1) && (diploidEngineImpact.GetBoxImpactFlag(OBJECT_NUMBER_PLAYER_LEFT) == 0))
	{
		for (int count = OBJECT_NUMBER_PLAYER_MAX; count != diploidEngineImpact.box_vector.size(); ++count)
		{
			diploidEngineImpact.SetBoxPositionAnimationX(count, 6);
			diploidEngineLayer.SetTOPAnimationPositionX(count, 6);
		}
	}
	else
	{	//何も押していなければ移動しない
		for (int count = OBJECT_NUMBER_PLAYER_MAX; count != diploidEngineImpact.box_vector.size(); ++count)
		{
			diploidEngineImpact.SetBoxPositionAnimationX(count, 0);
			diploidEngineLayer.SetTOPAnimationPositionX(count, 0);
		}
	}

	//PLAYER_BOX下が衝突しているときの処理
	if ((diploidEngineImpact.GetBoxImpactFlag(OBJECT_NUMBER_PLAYER_DOWN) == true))
	{
		object.physics.GravityReset();//重力を初期化。
		object.physics.SetGravitySize(0.0f);//重力加速度を0に設定。

		if ((diploidEngineInput.GetPressKey(KEY_INPUT_SPACE) == 1))
		{
			object.physics.JumpOn();//ジャンプする。
			object.physics.SetGravitySize(20.0f);//重力加速度を20.0fに設定。(ジャンプするときの速さを指定。)
		}

		//地面めり込み防止処理の為にヒットしているマップチップオブジェクトのオブジェクト番号を見つける。
		for (int count = OBJECT_NUMBER_PLAYER_MAX; count != diploidEngineImpact.box_vector.size(); ++count)
		{
			if ((diploidEngineImpact.box_vector[count].impacted == true))
			{
				number = count;//countで得た番号をnumberに代入
			}
		}

		//右BOXが当たったときに勝手に右にあるBOXの上に乗らない処理
		if ((diploidEngineImpact.box_vector[number].impacted == true) && (diploidEngineImpact.GetBoxImpactFlag(OBJECT_NUMBER_PLAYER_RIGHT) == false))//number目のヒット情報を判定
		{
			VECTOR box_pos = diploidEngineImpact.box_vector[number].GetPosition(VGet(0, 0, 0));//当たっている地面の座標を取得
			VECTOR player_pos = diploidEngineImpact.box_vector[OBJECT_NUMBER_PLAYER_DOWN].GetPosition(VGet(0, 1, 0));//プレーヤーBOX下の座標を取得
			float pos = box_pos.y - player_pos.y;//差を求める。

			//確認用変数。(Draw()に使用)
			test = pos;
			test1 = box_pos;
			test2 = player_pos;

			//めり込み修正。
			for (int count = OBJECT_NUMBER_PLAYER_MAX; count != diploidEngineImpact.box_vector.size(); ++count)
			{
				diploidEngineImpact.SetBoxPositionAnimationY(count, -pos + gravity + jump);
				diploidEngineLayer.SetTOPAnimationPositionY(count, -pos + gravity + jump);
			}
		}//左右下の3つがヒット判定の場合
		else if ((diploidEngineImpact.box_vector[number].impacted == true) && (diploidEngineImpact.GetBoxImpactFlag(OBJECT_NUMBER_PLAYER_RIGHT) == true) && (diploidEngineImpact.GetBoxImpactFlag(OBJECT_NUMBER_PLAYER_LEFT) == true))
		{
			VECTOR box_pos = diploidEngineImpact.box_vector[number].GetPosition(VGet(0, 0, 0));//当たっている地面の座標を取得
			VECTOR player_pos = diploidEngineImpact.box_vector[OBJECT_NUMBER_PLAYER_DOWN].GetPosition(VGet(0, 1, 0));//プレーヤーBOX下の座標を取得
			float pos = box_pos.y - player_pos.y;//差を求める。

			//確認用変数.。
			test = pos;
			test1 = box_pos;
			test2 = player_pos;

			//めり込み修正。
			for (int count = OBJECT_NUMBER_PLAYER_MAX; count != diploidEngineImpact.box_vector.size(); ++count)
			{
				diploidEngineImpact.SetBoxPositionAnimationY(count, -pos + gravity + jump);
				diploidEngineLayer.SetTOPAnimationPositionY(count, -pos + gravity + jump);
			}
		}
	}
}

void DiploidEngineApp::Draw()//結果を描写する処理
{
	DrawFormatString(0, 0, GetColor(255, 255, 255), "当たっている地面のオブジェクト番号 = %d", number);
	DrawFormatString(0, 20, GetColor(255, 255, 255), "プレーヤーBOX下が地面に当たっている = %d", diploidEngineImpact.GetBoxImpactFlag(OBJECT_NUMBER_PLAYER_DOWN));
	DrawFormatString(0, 40, GetColor(255, 255, 255), "ヒットの座標の差Y = %d", test);

	DrawFormatString(0, 60, GetColor(255, 255, 255), "ヒットマップチップX座標 = %f", test1.x);
	DrawFormatString(0, 80, GetColor(255, 255, 255), "ヒットマップチップY座標 = %f", test1.y);
	DrawFormatString(0, 100, GetColor(255, 255, 255), "プレーヤーBOX下のX座標 = %f", test2.x);
	DrawFormatString(0, 120, GetColor(255, 255, 255), "プレーヤーBOX下のY座標 = %f", test2.y);

}

void DiploidEngineApp::End()//engine終了前処理。
{

}